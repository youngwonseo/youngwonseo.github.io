<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>서영원 블로그</title>
    <description></description>
    <link>https://youngwonseo.github.io/</link>
    <atom:link href="https://youngwonseo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 30 Mar 2021 16:45:18 +0900</pubDate>
    <lastBuildDate>Tue, 30 Mar 2021 16:45:18 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>쿠버네티스 - 인그레스(Ingress)</title>
        <description>&lt;p&gt;서비스 오브젝트가 외부 요청을 받아들이기 위한 것이라면 &lt;strong&gt;인그레스&lt;/strong&gt;는 외부 요청을 어덯게 처리할 것인지 네트워크 7계층 레벨에서 정의하는 쿠버네티스 오브젝트 입니다. 주로 다음과 같은 주요 기능이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부요청 라우팅 : /app, /api 등 경로기반 라우팅&lt;/li&gt;
  &lt;li&gt;가상호트스 기반 요청처리 : 같은 IP에 대해 여러 도메인 이름에 대한 요청 처리&lt;/li&gt;
  &lt;li&gt;SSL/TLS 보안 연결 처리 : 여러 서비스로 요청을 라우팅할때 인증 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인그레스를-사용하는-이유&quot;&gt;인그레스를 사용하는 이유&lt;/h3&gt;
&lt;p&gt;NodePort, LoadBalancer 타입의 서비스에서도 위와 같은 기능이 제공됩니다. 그래도 인그레스를 사용하는 이유는 각 디플로이먼트와 해당하는 서비스에 일일이 설정해야할 내용을 &lt;strong&gt;단 하나의 URL 엔트포인트에서 관리&lt;/strong&gt;해주기 때문입니다.&lt;/p&gt;

&lt;p&gt;다음은 3개의 엔드포인트 및 각 서비스마다 설정이 필요상황과 인그레스를 통한 1개의 통합된 엔드포인트만 관리하는 상황을 보입니다. &lt;strong&gt;기존의 디플로이먼트나 서비스에서 각각 정의되던 라우팅 정보나 보안관련 사항이 인그레스에 의해 수행&lt;/strong&gt;됩니다. 즉 외부 요청에 대한 처리 규칙을 쿠버네티스 자체의 기능으로 편리하게 관리할 수 있다는 것이 인그레스의 핵심입니다.
&lt;img src=&quot;/assets/post/kubernetes/kubernetes-ingress-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;쿠버네티스 1.20이상의 버전사용시, apiVersion이 networking.k8s.io/v1beta1 으로 지정&lt;/li&gt;
  &lt;li&gt;nginx.ingress.kubernates.io/rewrite-target : Nginx 인그레스 컨트롤러에서만 사용가능한 옵션이고 아래의 path로 접근할 시 서비스의 해당 경로로 접근하도록 정의
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;아래의 /echo-hostname(/&lt;/td&gt;
              &lt;td&gt;$)(.&lt;em&gt;) 에서 (.&lt;/em&gt;)로 넘어오는 경로로 /$2가 대체되어 접근&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kubernates.io/ingress.class : 어떤 인그레스 컨트롤러를 적용할 것인지 정의
    &lt;ul&gt;
      &lt;li&gt;Nginx, Kong, GKE 등이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;spec.host : 인그레스가 처리할 url 정의, 여러개 정의도 가능&lt;/li&gt;
  &lt;li&gt;path : 해당 경로로 접근할 경우 연결할 서비스를 정의&lt;/li&gt;
  &lt;li&gt;backend : 요청이 전달될 서비스와 포트 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 정의로 인그레스를 생성해도 아무일도 일어나지 않습니다. 인그레스는 인그레스 컨트롤러라는 특수한 서버에 적용해야한 그 규칙을 사용할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;여러종류의 인그레스 컨트롤러중 쿠버네티스 커뮤니티에서 활발하게 사용되고 있는 Nginx 웹 서버 인그레스 컨트롤러가 있습니다. 맥의 경우 다음과 같은 명령어로 Nginx 인그레스 컨트롤러와 관련된 모든 리소르를 설치할 수 있습니다. AWS, GCP 등 다른환경에서의 설치 명령어는 &lt;a href=&quot;https://kubernetes.github.io/ingress-nginx/deploy/&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;를 확인해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginx-인그레스-컨트롤러에-ssltls-보안-연결-적용&quot;&gt;Nginx 인그레스 컨트롤러에 SSL/TLS 보안 연결 적용&lt;/h3&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392291&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;시작하세요! 도커/쿠버네티스 - 용찬호&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://kubernetes.github.io/ingress-nginx/deploy/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 19 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/kubernetes/ingress/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/kubernetes/ingress/</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>쿠버네티스 - 서비스(Service)</title>
        <description>&lt;h2 id=&quot;서비스-포트를-연결하고-외부에-노출&quot;&gt;서비스: 포트를 연결하고 외부에 노출&lt;/h2&gt;
&lt;p&gt;레플리카나 디플로이로 생성된 포드에는 kubectl describe 명령어로 포드의 내부 IP를 확인하고 해당 IP로 포드에 접근할 수 있습니다. 하지만 이방법은 로컬 개발환경에서만 사용가능합니다. 또한 해당 IP는 언제든지 변경될 수 있습니다. 여러개의 디플로이먼트를 연결하여 하나의 완벽한 어플리케이션으로 연동하려면 포드IP가 아닌 서로 &lt;strong&gt;발견(Discovery)&lt;/strong&gt;하고 접근할 수 있는 방법이 필요한데 이를 위해 &lt;strong&gt;서비스&lt;/strong&gt;라는 쿠버네티스 오브젝트를 사용합니다.
서비스는 다음과 같은 역할을 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;포드에 고유 도메인 부여&lt;/li&gt;
  &lt;li&gt;로드 밸런서&lt;/li&gt;
  &lt;li&gt;클라우드 프렛폼에서 로드밸런서, 클러스터 노드의 포드 외부 노출&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;서비스의-종류&quot;&gt;서비스의 종류&lt;/h2&gt;
&lt;p&gt;서비스는 포드에 어떻게 접근할 것이냐에 따라 타입이 여러개로 세분화되어있습니다. 주로 사용하는 3가지의 서비스타입입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ClusterIP : 쿠버네티스 내부에서만 포드들에 접근할 때 사용&lt;/li&gt;
  &lt;li&gt;NodePort : 포드에 접근할 수 있는 포트를 클러스터의 모든 노드에 동일한게 개방, 즉 외부에서 접근가능하도록 함&lt;/li&gt;
  &lt;li&gt;LoadBalancer : 클라우드 플랫폼에서 제공하는 로드 밸런서를 동적으로 프로비저닝해 포드에 연결, NodePort처럼 외부에서 접근가능, AWS, GCP등과 같은 클라우드 플랫폼에서만 사용가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;clusterip-타입의-서비스&quot;&gt;ClusterIP 타입의 서비스&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;spec.selector : 어떠한 포드에 접근할 것인지 명시&lt;/li&gt;
  &lt;li&gt;spec.ports.port :&lt;/li&gt;
  &lt;li&gt;spec.ports.targetPort :&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nodeport-타입의-서비스&quot;&gt;NodePort 타입의 서비스&lt;/h3&gt;

&lt;p&gt;하지만 실제 운영환경에서는 &lt;strong&gt;인그레스(Ingress)&lt;/strong&gt;라고 하는 쿠버네티스 오브젝트에서 간접적으로 사용됩니다.&lt;/p&gt;
&lt;h3 id=&quot;loadbalancer-타입의-서비스&quot;&gt;LoadBalancer 타입의 서비스&lt;/h3&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392291&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;시작하세요! 도커/쿠버네티스 - 용찬호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/kubernetes/service/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/kubernetes/service/</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>쿠버네티스 - 디플로이먼트(Deployment)</title>
        <description>&lt;h3 id=&quot;디플로이먼트-레플리카셋-포드의-배포를-관리&quot;&gt;디플로이먼트: 레플리카셋, 포드의 배포를 관리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실제 운영환경에서 레플리카셋을 yaml파일에 정의해서 사용하는 경우는 거의 없고 디플로이먼트 오브젝트 정의를 통해 레플리카셋을 정의합니다. 즉 레플리카셋에 포드가 정의된것같이 [디플로이먼트]-&amp;gt;[레플리카셋]-&amp;gt;[포드] 순으로 오브젝트의 상하위 구조를 가집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deployment-nginxyaml&quot;&gt;deployment-nginx.yaml&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-pod&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f deployment-nginx.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;디플로이먼트-사용이유&quot;&gt;디플로이먼트 사용이유&lt;/h2&gt;
&lt;p&gt;레플리카셋만으로 포드가 유지될 수 있지만 &lt;strong&gt;어플리케이션의 업데이트와 배포&lt;/strong&gt;를 더욱 편리하게 하기 위해서 디플로이먼트를 사용합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;어플리케이션을 업데이트할 경우 레플리카셋의 변경 사항을 저장하는 리비전(revision)을 남겨 롤백을 가능하게 함&lt;/li&gt;
  &lt;li&gt;포드의 롤링 업데이트 전략을 통해 무중단 서비스를 가능하게 함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;–record옵션&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubestl apply -f deployment-nginx.yaml --record
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미지 버전 변경&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl set image deplyment my-nginx-deployment nginx=nginx:1.11 --record
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;레플리카셋 확인&lt;/p&gt;

&lt;p&gt;리비전 확인
kubectl rollout history deployment my-nginx-deployment&lt;/p&gt;

&lt;p&gt;kubectl rollout undo deployment my-nginx-deployment –to-revision=1&lt;/p&gt;

&lt;p&gt;모든 실습 후에는 다음의 명령어로 리소스 정리를 수행합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete deployment,pod,rs --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392291&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;시작하세요! 도커/쿠버네티스 - 용찬호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/kubernetes/deployment/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/kubernetes/deployment/</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>소프트웨어 부하 테스트 도구 Artillery 소개</title>
        <description>&lt;p&gt;여기서는 소프트웨어 부하 테스트 도구인 &lt;a href=&quot;https://artillery.io/&quot; target=&quot;_blank&quot;&gt;Artillery&lt;/a&gt;를 소개합니다.&lt;/p&gt;

&lt;p&gt;Artillery를 설치하기위해서 다음과 같은 노드 패키지를 설치합니다(노드가 설치되어있지 않다면 노드를 먼저 설치해주세요).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g artillery
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;테스트-항목-정의&quot;&gt;테스트 항목 정의&lt;/h3&gt;
&lt;p&gt;Artillery를 사용해서 테스트를 수행하기 위해서 테스트 시나리오를 yaml파일로 정의합니다.&lt;/p&gt;

&lt;h3 id=&quot;cpu-testyaml&quot;&gt;cpu-test.yaml&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://localhost:8080&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;phases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;arrivalRate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Warm up&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scenarios&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Test&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/cpu-test&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;설명을 간략하게 하면 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;target : localhost:8080가 테스트를 수행할 서버&lt;/li&gt;
  &lt;li&gt;duration : 60초 동안 테스트를 수행&lt;/li&gt;
  &lt;li&gt;arrivalRate : 매초 5명의 가상유저를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cpu-test.yaml이 정의된 디렉토리에서 다음과 같은 명령어를 실행합니다. 아래의 명령어는 테스트 결과를 report.json으로 출력합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;artillery run --output report.json ./cpu-test.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트의 결과로 생성된 report.json을 다음의 명령어로 시각화로 리포팅된 결과를 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;artillery report ./report.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/artillery/aritllery-report.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;latency&quot;&gt;Latency&lt;/h3&gt;
&lt;p&gt;테스트를 
Scale-up
Scale-out&lt;/p&gt;

&lt;h3 id=&quot;테스시-고려사항&quot;&gt;테스시 고려사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;예상 TPS보다 여유롭게&lt;/li&gt;
  &lt;li&gt;기대 Latency를 말족할 때까지&lt;/li&gt;
  &lt;li&gt;Scale-out을 해도 성능이 좋아지지 않으면 병목을 의심&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://class101.net/products/T6HT0bUDKIH1V5i3Ji2M&quot; target=&quot;_blank&quot;&gt;클래스101-현직 대기업 개발자 푸와 함께하는 진짜 백엔드 시스템 실무!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://artillery.io/&quot; target=&quot;_blank&quot;&gt;Artillery.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/artillery/artillery-intro/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/artillery/artillery-intro/</guid>
        
        
        <category>artillery</category>
        
      </item>
    
      <item>
        <title>쿠버네티스 - 레프리카셋(Replica Set)</title>
        <description>&lt;h3 id=&quot;레플리카셋-일정-개수의-포드를-유지하는-컨트롤러&quot;&gt;레플리카셋: 일정 개수의 포드를 유지하는 컨트롤러&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;마이크로 서비스등과 같이 동일한 포드를 여러개 유지하며 서비스를 운영하는 환경에서 동일한 포드를 여러개 실행함&lt;/li&gt;
  &lt;li&gt;이런 특징은 노드 장애 등과 같이 문제가 발생시 고가용성을 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 같은 특징으로 포드를 직접생성하고 관리하는 일은 거의 없고 레프리카셋을 생성함으로써 포드를 관리합니다.&lt;/p&gt;

&lt;h3 id=&quot;replicaset-nginxyaml&quot;&gt;replicaset-nginx.yaml&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicaSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;replicaset-nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-pods-label&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-pod&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-pods-label&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;spec.replicas : 유지할 포드 개수&lt;/li&gt;
  &lt;li&gt;spec.selector : template항목은 포드를 정의, 이전의 포드 정의와 비슷하다는것을 알 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;apply로 실행을 합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f replicaset-nginx.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 명령어를 실행하면 포드가 3개 실행되는것을 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;결과&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                     READY   STATUS    RESTARTS   AGE
replicaset-nginx-f2khk   1/1     Running   0          5m41s
replicaset-nginx-hvwm7   1/1     Running   0          5m41s
replicaset-nginx-xbppw   1/1     Running   0          5m41s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;레프리카셋과 포드는 느슨한 연결(loosely coupled)로 연결되어 있으며 이때 레플리카셋 정의에 사용했던 &lt;strong&gt;label selector&lt;/strong&gt;를 사용합니다. 위 레플리카셋 정의파일을 살펴보면 spec.selector.matchLabels.app과 spec.template.metadata.labels.app과 동일한 my-nginx-pods-label로 설정되어 있는것을 확인할 수 있습니다. 
레플리카셋을 처음생성했을땐 app:my-nginx-pods-label의 포드가 생성되어있지 않기 때문에 template에 정의된 포드를 3개 생성하는 것입니다. &lt;strong&gt;만약 실행중이 포드 하나를 삭제하면 3개로 포드를 유지하기 위해 하나의 포드를 다시 생성합니다.
이것이 레플리카셋의 역할입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;my-nginx-pods-label을 사용한 것과 같이 라벨은 쿠버네티스 리소스의 부가적인 정보를 표현할 뿐만 아니라, 서로 다은 오브젝트가 서로 찾아야 할때 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;실행했던 레플리카셋은 다음의 명령어로 삭제합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete replicaset replicaset-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392291&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;시작하세요! 도커/쿠버네티스 - 용찬호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 16 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/kubernetes/replica-set/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/kubernetes/replica-set/</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>쿠버네티스 - 포드(Pod)</title>
        <description>&lt;h3 id=&quot;포드-컨테이너의-기본단위&quot;&gt;포드: 컨테이너의 기본단위&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;포드는 1개이상의 컨테이로 구성된 컨테이너의 집합&lt;/li&gt;
  &lt;li&gt;포드는 쿠버네티스에서 가장 기초적이고 중요한 개념&lt;/li&gt;
  &lt;li&gt;도커에서는 컨테이너, 도커 스웜에서는 서비스, 쿠버네티스에서는 포드가 기본 배포단위&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nginx를 쿠버네티스에서 생성하는 예제입니다. 쿠버네티스상의 많은 작업은 yaml파일로 정의되고 실행됩니다.&lt;/p&gt;

&lt;h4 id=&quot;nginx-podyaml&quot;&gt;nginx-pod.yaml&lt;/h4&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-nginx-container&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;apiVersion : yaml파일에 정의한 오브젝트의 api 버전&lt;/li&gt;
  &lt;li&gt;kind : 리소스의 종류, kubectl api-resouces에서 kind의 종류를 확인가능&lt;/li&gt;
  &lt;li&gt;metadata : lable, annotation, name등과 같이 리소스의 부가 정보&lt;/li&gt;
  &lt;li&gt;spec : 생성할 리소스의 상세정보&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 위에서 작성한 yaml파일로 포드를 생성하는 명령어 입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f nginx-pod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;kubectl get [오브젝트 이름]를 활용해 특정 오브젝트의 목록을 확인할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 위에서 생성했던 my-nginx-pod의 상세정보(포드의 IP 등)를 확인하는 명령어 입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl describe pods my-nginx-pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아직까지는 위 포드의 Nginx에 접근할 수 없습니다(describe에서 출력되는 IP는 내부 IP입니다, 클러스터 내부에서는 위 포드에 접근할 수 있습니다). 포드에 접근할려면 &lt;strong&gt;서비스 오브젝트&lt;/strong&gt;를 따로 생성해야합니다.&lt;/p&gt;

&lt;p&gt;다음은 포드 내부에 접속하는 명령어 입니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl exec -it my-nginx-pod bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 포드 로그를 확인합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl logs my-nginx-pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 포드를 삭제합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete -f nginx-pod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;또는 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl delete pod my-nginx-pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;포드-vs-도커-컨테이너&quot;&gt;포드 vs 도커 컨테이너&lt;/h2&gt;
&lt;p&gt;쿠버네티스가 컨테이너가 아닌 포드를 기본 단위로 사용하는 이유중 하나는 포드 내부의 컨테이너들은 &lt;strong&gt;네트워크와 같은 리눅스 네임스페이스를 공유&lt;/strong&gt;하는 추상화된 집합으로 사용하기 위해서 입니다.&lt;/p&gt;

&lt;h2 id=&quot;완전한-어플리케이션으로서-포드&quot;&gt;완전한 어플리케이션으로서 포드&lt;/h2&gt;
&lt;p&gt;실제 환경에서는 1개의 컨테이너로 구성된 포드를 사용하는 경우가 많습니다. 이유는 하나의 포드는 하나의 완전한 어플리케이션을 유지하기 위해서입니다.&lt;/p&gt;

&lt;p&gt;예외적인 경우도 존재합니다. 로깅과 같이 특정 컨테이너의 부가적인 기능을 지원하기 위한 컨테이너를 사이드카 컨테이너라고 하는데 이런경우 주 기능을 당담하는 컨테이너와 함께 동일한 포드내에서 실행합니다.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392291&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;시작하세요! 도커/쿠버네티스 - 용찬호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 15 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/kubernetes/pod/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/kubernetes/pod/</guid>
        
        
        <category>kubernetes</category>
        
      </item>
    
      <item>
        <title>스프링 클라우드 스트림</title>
        <description>&lt;p&gt;이벤트 기반 마이크로 서비스
논블로킹 동기 REST API&lt;/p&gt;

&lt;p&gt;이벤트 드리븐 시스템&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/stream/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/stream/</guid>
        
        
      </item>
    
      <item>
        <title>Routing</title>
        <description>
&lt;p&gt;zuul 
블로킹 API&lt;/p&gt;

&lt;p&gt;spring cloud gateway
스프링5
프로젝트 리액터
스브링 부트2 기반 논블로킹 API&lt;/p&gt;

&lt;p&gt;더 많은 양의 동시 요청을 처리 가능&lt;/p&gt;

&lt;p&gt;istio&lt;/p&gt;

&lt;p&gt;service mesh&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/routing/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/routing/</guid>
        
        
      </item>
    
      <item>
        <title>클라이언트 회복성 패턴</title>
        <description>&lt;h3 id=&quot;1-클라이언트-측-부하-분산&quot;&gt;1. 클라이언트 측 부하 분산&lt;/h3&gt;

&lt;h3 id=&quot;2-회로-차단기&quot;&gt;2. 회로 차단기&lt;/h3&gt;

&lt;h3 id=&quot;3-폴백&quot;&gt;3. 폴백&lt;/h3&gt;

&lt;h3 id=&quot;4-벌크헤드&quot;&gt;4. 벌크헤드&lt;/h3&gt;
</description>
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/recovery/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/recovery/</guid>
        
        
      </item>
    
      <item>
        <title>스프링 클라우드 유레카</title>
        <description>&lt;h2 id=&quot;유레카-서비스-구축&quot;&gt;유레카 서비스 구축&lt;/h2&gt;

&lt;p&gt;https://cloud.spring.io/spring-cloud-netflix&lt;/p&gt;

&lt;h2 id=&quot;서비스-디스커버리&quot;&gt;서비스 디스커버리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 디스커버리 클라이언트&lt;/li&gt;
  &lt;li&gt;RestTemplate이 활성화된 스프링 디스커버리 클라이언트&lt;/li&gt;
  &lt;li&gt;넷플릭스 Feign 클라이언트&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;feign&quot;&gt;Feign&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;자바인터페이스 정의&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;정기적으로 heartbeat메세지를 보낸다&lt;/p&gt;

&lt;h2 id=&quot;유레카-서버&quot;&gt;유레카 서버&lt;/h2&gt;
&lt;p&gt;유레카 서버를 구축하기 위해 다음과 같은 단계를 실행한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;스프링 부트 프로젝트 생성&lt;/li&gt;
  &lt;li&gt;eureka-server 의존성 추가&lt;/li&gt;
  &lt;li&gt;애플리케이션 클래스에 @EnableEurekaServer 어노테이션 추가&lt;/li&gt;
  &lt;li&gt;application.yml 파일 수정&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;상용환경에서는 고가용성을 보장하기 위해 유레카 서버를 두대 이상 운용해야한다.&lt;/p&gt;

&lt;h2 id=&quot;유레카-클라이언트&quot;&gt;유레카 클라이언트&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;스프링 부트 프로젝트 생성&lt;/li&gt;
  &lt;li&gt;eureka-client 의존성 추가&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 07 Feb 2021 00:00:00 +0900</pubDate>
        <link>https://youngwonseo.github.io/service-discovery/</link>
        <guid isPermaLink="true">https://youngwonseo.github.io/service-discovery/</guid>
        
        
      </item>
    
  </channel>
</rss>
